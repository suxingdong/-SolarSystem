// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace ProtoMsg {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class ProtoBean {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    #endregion
    #region Extensions
    internal static readonly object Descriptor;
    static ProtoBean() {
      Descriptor = null;
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Server : pb::GeneratedMessageLite<Server, Server.Builder> {
    private Server() { }
    private static readonly Server defaultInstance = new Server().MakeReadOnly();
    private static readonly string[] _serverFieldNames = new string[] { "id", "name", "recommend", "status" };
    private static readonly uint[] _serverFieldTags = new uint[] { 8, 18, 32, 24 };
    public static Server DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Server DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Server ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int NameFieldNumber = 2;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int StatusFieldNumber = 3;
    private bool hasStatus;
    private int status_;
    public bool HasStatus {
      get { return hasStatus; }
    }
    public int Status {
      get { return status_; }
    }
    
    public const int RecommendFieldNumber = 4;
    private bool hasRecommend;
    private int recommend_;
    public bool HasRecommend {
      get { return hasRecommend; }
    }
    public int Recommend {
      get { return recommend_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasName) return false;
        if (!hasStatus) return false;
        if (!hasRecommend) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _serverFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[0], Id);
      }
      if (hasName) {
        output.WriteString(2, field_names[1], Name);
      }
      if (hasStatus) {
        output.WriteInt32(3, field_names[3], Status);
      }
      if (hasRecommend) {
        output.WriteInt32(4, field_names[2], Recommend);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Name);
        }
        if (hasStatus) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Status);
        }
        if (hasRecommend) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, Recommend);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasName) hash ^= name_.GetHashCode();
      if (hasStatus) hash ^= status_.GetHashCode();
      if (hasRecommend) hash ^= recommend_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      Server other = obj as Server;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasName != other.hasName || (hasName && !name_.Equals(other.name_))) return false;
      if (hasStatus != other.hasStatus || (hasStatus && !status_.Equals(other.status_))) return false;
      if (hasRecommend != other.hasRecommend || (hasRecommend && !recommend_.Equals(other.recommend_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("name", hasName, name_, writer);
      PrintField("status", hasStatus, status_, writer);
      PrintField("recommend", hasRecommend, recommend_, writer);
    }
    #endregion
    
    public static Server ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Server ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Server ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Server ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Server ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Server ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Server ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Server ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Server ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Server ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Server MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Server prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<Server, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Server cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Server result;
      
      private Server PrepareBuilder() {
        if (resultIsReadOnly) {
          Server original = result;
          result = new Server();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Server MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override Server DefaultInstanceForType {
        get { return global::ProtoMsg.Server.DefaultInstance; }
      }
      
      public override Server BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is Server) {
          return MergeFrom((Server) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Server other) {
        if (other == global::ProtoMsg.Server.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasStatus) {
          Status = other.Status;
        }
        if (other.HasRecommend) {
          Recommend = other.Recommend;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serverFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serverFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 18: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 24: {
              result.hasStatus = input.ReadInt32(ref result.status_);
              break;
            }
            case 32: {
              result.hasRecommend = input.ReadInt32(ref result.recommend_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasStatus {
        get { return result.hasStatus; }
      }
      public int Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      public Builder SetStatus(int value) {
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.hasStatus = false;
        result.status_ = 0;
        return this;
      }
      
      public bool HasRecommend {
        get { return result.hasRecommend; }
      }
      public int Recommend {
        get { return result.Recommend; }
        set { SetRecommend(value); }
      }
      public Builder SetRecommend(int value) {
        PrepareBuilder();
        result.hasRecommend = true;
        result.recommend_ = value;
        return this;
      }
      public Builder ClearRecommend() {
        PrepareBuilder();
        result.hasRecommend = false;
        result.recommend_ = 0;
        return this;
      }
    }
    static Server() {
      object.ReferenceEquals(global::ProtoMsg.ProtoBean.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builds : pb::GeneratedMessageLite<Builds, Builds.Builder> {
    private Builds() { }
    private static readonly Builds defaultInstance = new Builds().MakeReadOnly();
    private static readonly string[] _buildsFieldNames = new string[] { "BaseId", "LocalId", "level" };
    private static readonly uint[] _buildsFieldTags = new uint[] { 8, 16, 24 };
    public static Builds DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Builds DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Builds ThisMessage {
      get { return this; }
    }
    
    public const int BaseIdFieldNumber = 1;
    private bool hasBaseId;
    private int baseId_;
    public bool HasBaseId {
      get { return hasBaseId; }
    }
    public int BaseId {
      get { return baseId_; }
    }
    
    public const int LocalIdFieldNumber = 2;
    private bool hasLocalId;
    private int localId_;
    public bool HasLocalId {
      get { return hasLocalId; }
    }
    public int LocalId {
      get { return localId_; }
    }
    
    public const int LevelFieldNumber = 3;
    private bool hasLevel;
    private int level_;
    public bool HasLevel {
      get { return hasLevel; }
    }
    public int Level {
      get { return level_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _buildsFieldNames;
      if (hasBaseId) {
        output.WriteInt32(1, field_names[0], BaseId);
      }
      if (hasLocalId) {
        output.WriteInt32(2, field_names[1], LocalId);
      }
      if (hasLevel) {
        output.WriteInt32(3, field_names[2], Level);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBaseId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, BaseId);
        }
        if (hasLocalId) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, LocalId);
        }
        if (hasLevel) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Level);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasBaseId) hash ^= baseId_.GetHashCode();
      if (hasLocalId) hash ^= localId_.GetHashCode();
      if (hasLevel) hash ^= level_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      Builds other = obj as Builds;
      if (other == null) return false;
      if (hasBaseId != other.hasBaseId || (hasBaseId && !baseId_.Equals(other.baseId_))) return false;
      if (hasLocalId != other.hasLocalId || (hasLocalId && !localId_.Equals(other.localId_))) return false;
      if (hasLevel != other.hasLevel || (hasLevel && !level_.Equals(other.level_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("BaseId", hasBaseId, baseId_, writer);
      PrintField("LocalId", hasLocalId, localId_, writer);
      PrintField("level", hasLevel, level_, writer);
    }
    #endregion
    
    public static Builds ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Builds ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Builds ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Builds ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Builds ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Builds ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builds ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Builds ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Builds ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Builds ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Builds MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Builds prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<Builds, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Builds cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Builds result;
      
      private Builds PrepareBuilder() {
        if (resultIsReadOnly) {
          Builds original = result;
          result = new Builds();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Builds MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override Builds DefaultInstanceForType {
        get { return global::ProtoMsg.Builds.DefaultInstance; }
      }
      
      public override Builds BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is Builds) {
          return MergeFrom((Builds) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Builds other) {
        if (other == global::ProtoMsg.Builds.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBaseId) {
          BaseId = other.BaseId;
        }
        if (other.HasLocalId) {
          LocalId = other.LocalId;
        }
        if (other.HasLevel) {
          Level = other.Level;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_buildsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _buildsFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasBaseId = input.ReadInt32(ref result.baseId_);
              break;
            }
            case 16: {
              result.hasLocalId = input.ReadInt32(ref result.localId_);
              break;
            }
            case 24: {
              result.hasLevel = input.ReadInt32(ref result.level_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasBaseId {
        get { return result.hasBaseId; }
      }
      public int BaseId {
        get { return result.BaseId; }
        set { SetBaseId(value); }
      }
      public Builder SetBaseId(int value) {
        PrepareBuilder();
        result.hasBaseId = true;
        result.baseId_ = value;
        return this;
      }
      public Builder ClearBaseId() {
        PrepareBuilder();
        result.hasBaseId = false;
        result.baseId_ = 0;
        return this;
      }
      
      public bool HasLocalId {
        get { return result.hasLocalId; }
      }
      public int LocalId {
        get { return result.LocalId; }
        set { SetLocalId(value); }
      }
      public Builder SetLocalId(int value) {
        PrepareBuilder();
        result.hasLocalId = true;
        result.localId_ = value;
        return this;
      }
      public Builder ClearLocalId() {
        PrepareBuilder();
        result.hasLocalId = false;
        result.localId_ = 0;
        return this;
      }
      
      public bool HasLevel {
        get { return result.hasLevel; }
      }
      public int Level {
        get { return result.Level; }
        set { SetLevel(value); }
      }
      public Builder SetLevel(int value) {
        PrepareBuilder();
        result.hasLevel = true;
        result.level_ = value;
        return this;
      }
      public Builder ClearLevel() {
        PrepareBuilder();
        result.hasLevel = false;
        result.level_ = 0;
        return this;
      }
    }
    static Builds() {
      object.ReferenceEquals(global::ProtoMsg.ProtoBean.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Soldiers : pb::GeneratedMessageLite<Soldiers, Soldiers.Builder> {
    private Soldiers() { }
    private static readonly Soldiers defaultInstance = new Soldiers().MakeReadOnly();
    private static readonly string[] _soldiersFieldNames = new string[] { "BaseId", "LocalId", "level" };
    private static readonly uint[] _soldiersFieldTags = new uint[] { 8, 16, 24 };
    public static Soldiers DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Soldiers DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Soldiers ThisMessage {
      get { return this; }
    }
    
    public const int BaseIdFieldNumber = 1;
    private bool hasBaseId;
    private int baseId_;
    public bool HasBaseId {
      get { return hasBaseId; }
    }
    public int BaseId {
      get { return baseId_; }
    }
    
    public const int LocalIdFieldNumber = 2;
    private bool hasLocalId;
    private int localId_;
    public bool HasLocalId {
      get { return hasLocalId; }
    }
    public int LocalId {
      get { return localId_; }
    }
    
    public const int LevelFieldNumber = 3;
    private bool hasLevel;
    private int level_;
    public bool HasLevel {
      get { return hasLevel; }
    }
    public int Level {
      get { return level_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _soldiersFieldNames;
      if (hasBaseId) {
        output.WriteInt32(1, field_names[0], BaseId);
      }
      if (hasLocalId) {
        output.WriteInt32(2, field_names[1], LocalId);
      }
      if (hasLevel) {
        output.WriteInt32(3, field_names[2], Level);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBaseId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, BaseId);
        }
        if (hasLocalId) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, LocalId);
        }
        if (hasLevel) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Level);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasBaseId) hash ^= baseId_.GetHashCode();
      if (hasLocalId) hash ^= localId_.GetHashCode();
      if (hasLevel) hash ^= level_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      Soldiers other = obj as Soldiers;
      if (other == null) return false;
      if (hasBaseId != other.hasBaseId || (hasBaseId && !baseId_.Equals(other.baseId_))) return false;
      if (hasLocalId != other.hasLocalId || (hasLocalId && !localId_.Equals(other.localId_))) return false;
      if (hasLevel != other.hasLevel || (hasLevel && !level_.Equals(other.level_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("BaseId", hasBaseId, baseId_, writer);
      PrintField("LocalId", hasLocalId, localId_, writer);
      PrintField("level", hasLevel, level_, writer);
    }
    #endregion
    
    public static Soldiers ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Soldiers ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Soldiers ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Soldiers ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Soldiers ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Soldiers ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Soldiers ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Soldiers ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Soldiers ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Soldiers ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Soldiers MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Soldiers prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<Soldiers, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Soldiers cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Soldiers result;
      
      private Soldiers PrepareBuilder() {
        if (resultIsReadOnly) {
          Soldiers original = result;
          result = new Soldiers();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Soldiers MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override Soldiers DefaultInstanceForType {
        get { return global::ProtoMsg.Soldiers.DefaultInstance; }
      }
      
      public override Soldiers BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is Soldiers) {
          return MergeFrom((Soldiers) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Soldiers other) {
        if (other == global::ProtoMsg.Soldiers.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBaseId) {
          BaseId = other.BaseId;
        }
        if (other.HasLocalId) {
          LocalId = other.LocalId;
        }
        if (other.HasLevel) {
          Level = other.Level;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_soldiersFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _soldiersFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasBaseId = input.ReadInt32(ref result.baseId_);
              break;
            }
            case 16: {
              result.hasLocalId = input.ReadInt32(ref result.localId_);
              break;
            }
            case 24: {
              result.hasLevel = input.ReadInt32(ref result.level_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasBaseId {
        get { return result.hasBaseId; }
      }
      public int BaseId {
        get { return result.BaseId; }
        set { SetBaseId(value); }
      }
      public Builder SetBaseId(int value) {
        PrepareBuilder();
        result.hasBaseId = true;
        result.baseId_ = value;
        return this;
      }
      public Builder ClearBaseId() {
        PrepareBuilder();
        result.hasBaseId = false;
        result.baseId_ = 0;
        return this;
      }
      
      public bool HasLocalId {
        get { return result.hasLocalId; }
      }
      public int LocalId {
        get { return result.LocalId; }
        set { SetLocalId(value); }
      }
      public Builder SetLocalId(int value) {
        PrepareBuilder();
        result.hasLocalId = true;
        result.localId_ = value;
        return this;
      }
      public Builder ClearLocalId() {
        PrepareBuilder();
        result.hasLocalId = false;
        result.localId_ = 0;
        return this;
      }
      
      public bool HasLevel {
        get { return result.hasLevel; }
      }
      public int Level {
        get { return result.Level; }
        set { SetLevel(value); }
      }
      public Builder SetLevel(int value) {
        PrepareBuilder();
        result.hasLevel = true;
        result.level_ = value;
        return this;
      }
      public Builder ClearLevel() {
        PrepareBuilder();
        result.hasLevel = false;
        result.level_ = 0;
        return this;
      }
    }
    static Soldiers() {
      object.ReferenceEquals(global::ProtoMsg.ProtoBean.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Weapons : pb::GeneratedMessageLite<Weapons, Weapons.Builder> {
    private Weapons() { }
    private static readonly Weapons defaultInstance = new Weapons().MakeReadOnly();
    private static readonly string[] _weaponsFieldNames = new string[] { "BaseId", "LocalId", "level" };
    private static readonly uint[] _weaponsFieldTags = new uint[] { 8, 16, 24 };
    public static Weapons DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Weapons DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Weapons ThisMessage {
      get { return this; }
    }
    
    public const int BaseIdFieldNumber = 1;
    private bool hasBaseId;
    private int baseId_;
    public bool HasBaseId {
      get { return hasBaseId; }
    }
    public int BaseId {
      get { return baseId_; }
    }
    
    public const int LocalIdFieldNumber = 2;
    private bool hasLocalId;
    private int localId_;
    public bool HasLocalId {
      get { return hasLocalId; }
    }
    public int LocalId {
      get { return localId_; }
    }
    
    public const int LevelFieldNumber = 3;
    private bool hasLevel;
    private int level_;
    public bool HasLevel {
      get { return hasLevel; }
    }
    public int Level {
      get { return level_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _weaponsFieldNames;
      if (hasBaseId) {
        output.WriteInt32(1, field_names[0], BaseId);
      }
      if (hasLocalId) {
        output.WriteInt32(2, field_names[1], LocalId);
      }
      if (hasLevel) {
        output.WriteInt32(3, field_names[2], Level);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBaseId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, BaseId);
        }
        if (hasLocalId) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, LocalId);
        }
        if (hasLevel) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Level);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasBaseId) hash ^= baseId_.GetHashCode();
      if (hasLocalId) hash ^= localId_.GetHashCode();
      if (hasLevel) hash ^= level_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      Weapons other = obj as Weapons;
      if (other == null) return false;
      if (hasBaseId != other.hasBaseId || (hasBaseId && !baseId_.Equals(other.baseId_))) return false;
      if (hasLocalId != other.hasLocalId || (hasLocalId && !localId_.Equals(other.localId_))) return false;
      if (hasLevel != other.hasLevel || (hasLevel && !level_.Equals(other.level_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("BaseId", hasBaseId, baseId_, writer);
      PrintField("LocalId", hasLocalId, localId_, writer);
      PrintField("level", hasLevel, level_, writer);
    }
    #endregion
    
    public static Weapons ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Weapons ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Weapons ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Weapons ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Weapons ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Weapons ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Weapons ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Weapons ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Weapons ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Weapons ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Weapons MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Weapons prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<Weapons, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Weapons cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Weapons result;
      
      private Weapons PrepareBuilder() {
        if (resultIsReadOnly) {
          Weapons original = result;
          result = new Weapons();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Weapons MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override Weapons DefaultInstanceForType {
        get { return global::ProtoMsg.Weapons.DefaultInstance; }
      }
      
      public override Weapons BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is Weapons) {
          return MergeFrom((Weapons) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Weapons other) {
        if (other == global::ProtoMsg.Weapons.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBaseId) {
          BaseId = other.BaseId;
        }
        if (other.HasLocalId) {
          LocalId = other.LocalId;
        }
        if (other.HasLevel) {
          Level = other.Level;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_weaponsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _weaponsFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasBaseId = input.ReadInt32(ref result.baseId_);
              break;
            }
            case 16: {
              result.hasLocalId = input.ReadInt32(ref result.localId_);
              break;
            }
            case 24: {
              result.hasLevel = input.ReadInt32(ref result.level_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasBaseId {
        get { return result.hasBaseId; }
      }
      public int BaseId {
        get { return result.BaseId; }
        set { SetBaseId(value); }
      }
      public Builder SetBaseId(int value) {
        PrepareBuilder();
        result.hasBaseId = true;
        result.baseId_ = value;
        return this;
      }
      public Builder ClearBaseId() {
        PrepareBuilder();
        result.hasBaseId = false;
        result.baseId_ = 0;
        return this;
      }
      
      public bool HasLocalId {
        get { return result.hasLocalId; }
      }
      public int LocalId {
        get { return result.LocalId; }
        set { SetLocalId(value); }
      }
      public Builder SetLocalId(int value) {
        PrepareBuilder();
        result.hasLocalId = true;
        result.localId_ = value;
        return this;
      }
      public Builder ClearLocalId() {
        PrepareBuilder();
        result.hasLocalId = false;
        result.localId_ = 0;
        return this;
      }
      
      public bool HasLevel {
        get { return result.hasLevel; }
      }
      public int Level {
        get { return result.Level; }
        set { SetLevel(value); }
      }
      public Builder SetLevel(int value) {
        PrepareBuilder();
        result.hasLevel = true;
        result.level_ = value;
        return this;
      }
      public Builder ClearLevel() {
        PrepareBuilder();
        result.hasLevel = false;
        result.level_ = 0;
        return this;
      }
    }
    static Weapons() {
      object.ReferenceEquals(global::ProtoMsg.ProtoBean.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
